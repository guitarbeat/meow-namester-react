/**
 * @module NavBar
 * @description Responsive navigation bar with theme toggle and links.
 */
// Third-party imports
import React, { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import "./navbar.css";
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - const scrollToTop = () => (line 60)
 *   - const updateThemeColor = (isLight) => (line 67)
 *   - if (themeColorMeta) (line 69)
 *   - if (isLoggedIn) (line 96)
 *   - setThemeClicks(newClicks); (line 113)
 *   - if (newClicks.length >= 5) (line 115)
 *   - setThemeClicks([]); (line 116)
 *   - if (onMatrixActivate) (line 117)
 *   - onMatrixActivate(); (line 118)
 *   - if (onThemeChange) (line 130)
 *   - onThemeChange(newTheme); (line 131)
 *   - updateThemeColor(newTheme); (line 135)
 *   - setIsMobileMenuOpen(!isMobileMenuOpen); (line 139)
 *   - setView(key.toLowerCase()); (line 144)
 *   - setIsMobileMenuOpen(false); (line 145)
 *   - useEffect(() => (line 150)
 *   - const checkScroll = () => (line 151)
 *   - setShowScrollTop(window.scrollY > 300); (line 152)
 *   - checkScroll(); (line 155)
 *   - const throttledCheckScroll = () => (line 158)
 *   - if (timeoutId === null) (line 159)
 *   - checkScroll(); (line 161)
 *   - return () => (line 169)
 *   - if (timeoutId) (line 171)
 *   - clearTimeout(timeoutId); (line 172)
 *   - handleNavItemClick(key); (line 184)
 *   - if (!isLoggedIn) (line 194)
 *   - if (isLoggedIn) (line 212)
 *   - onLogout(); (line 219)
 *   - setIsMobileMenuOpen(false); (line 220)
 *   - setView("tournament"); (line 237)
 *   - if (typeof onStartNewTournament === "function") (line 238)
 *   - onStartNewTournament(); (line 239)
 *   - if (isLoggedIn && userName) (line 259)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

// Utility functions
const scrollToTop = () => {
  window.scrollTo({
    top: 0,
    behavior: "smooth",
  });
};

function NavBar({
  view,
  setView,
  isLoggedIn,
  userName,
  onLogout,
  onStartNewTournament,
}) {
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // Define nav items based on login state
  const navItems = {};

  // Always show Tournament
  navItems.Tournament = "#";

  // Show Profile if logged in
  if (isLoggedIn) {
    navItems.Profile = "#";
  }

  // Add external project links if on login page
  const externalLinks = isLoggedIn
    ? []
    : [
        { name: "K-Pop Site", url: "https://kpop.alw.lol" },
        { name: "Personal Site", url: "https://aaronwoods.info" },
      ];

  const handleMobileMenuClick = useCallback(() => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  }, [isMobileMenuOpen]);

  const handleNavItemClick = useCallback(
    (key) => {
      setView(key.toLowerCase());
      setIsMobileMenuOpen(false);
    },
    [setView]
  );

  useEffect(() => {
    const checkScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    checkScroll();

    let timeoutId = null;
    const throttledCheckScroll = () => {
      if (timeoutId === null) {
        timeoutId = setTimeout(() => {
          checkScroll();
          timeoutId = null;
        }, 100);
      }
    };

    window.addEventListener("scroll", throttledCheckScroll);

    return () => {
      window.removeEventListener("scroll", throttledCheckScroll);
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, []);

  // Create nav links
  const navLinks = Object.keys(navItems).map((key) => (
    <li key={key} className="navbar__item">
      <a
        href="#"
        onClick={(event) => {
          event.preventDefault();
          handleNavItemClick(key);
        }}
        className={view === key.toLowerCase() ? "active" : ""}
      >
        {key}
      </a>
    </li>
  ));

  // Add external project links if on login page
  if (!isLoggedIn) {
    externalLinks.forEach((link) => {
      navLinks.push(
        <li key={link.name} className="navbar__item navbar__item--external">
          <a
            href={link.url}
            target="_blank"
            rel="noopener noreferrer"
            className="navbar__external-link"
          >
            {link.name}
          </a>
        </li>
      );
    });
  }

  // Add logout button if user is logged in
  if (isLoggedIn) {
    navLinks.push(
      <li key="logout" className="navbar__item navbar__item--logout">
        <a
          href="#"
          onClick={(event) => {
            event.preventDefault();
            onLogout();
            setIsMobileMenuOpen(false);
          }}
        >
          Logout
        </a>
      </li>
    );
  }

  // Add site logo/name
  const logoItem = (
    <li key="logo" className="navbar__item navbar__item--logo">
      <a
        href="#"
        onClick={(e) => {
          e.preventDefault();
          // Treat logo as "home" → Tournament Setup
          setView("tournament");
          if (typeof onStartNewTournament === "function") {
            onStartNewTournament();
          }
        }}
        className="navbar__logo-link"
        aria-label="Go to home page"
      >
        <img
          src="/images/cat.gif"
          alt="Cat animation"
          className="navbar__logo"
          width="30"
          height="30"
        />
        <span className="navbar__title">Meow Namester</span>
      </a>
    </li>
  );

  // Add user name if logged in
  let userInfo = null;
  if (isLoggedIn && userName) {
    userInfo = (
      <li key="user" className="navbar__item navbar__item--user">
        <span className="navbar__greeting" aria-label={`Welcome, ${userName}`}>
          Welcome, {userName}
        </span>
      </li>
    );
  }

  // If not logged in (on login screen), make navbar transparent
  const navbarClass = `navbar ${isLoggedIn ? "" : "transparent"} ${isMobileMenuOpen ? "mobile-menu-open" : ""}`;

  return (
    <>
      <nav className={navbarClass}>
        <div className="navbar__menu-container">
          <ul className="navbar__menu-list" role="navigation">
            {logoItem}
            {userInfo}
            {navLinks}
          </ul>
          <button
            className="navbar__mobile-menu-button"
            onClick={handleMobileMenuClick}
            aria-label="Toggle menu"
            aria-expanded={isMobileMenuOpen}
          >
            <span className="navbar__mobile-menu-icon"></span>
          </button>
        </div>
      </nav>
      {isLoggedIn && (
        <button
          type="button"
          className={`scroll-to-top ${showScrollTop ? "visible" : ""}`}
          onClick={scrollToTop}
          aria-label="Scroll to top"
          aria-hidden={!showScrollTop}
          tabIndex={showScrollTop ? 0 : -1}
        >
          ↑
        </button>
      )}
    </>
  );
}

NavBar.displayName = "NavBar";

NavBar.propTypes = {
  view: PropTypes.string.isRequired,
  setView: PropTypes.func.isRequired,
  isLoggedIn: PropTypes.bool.isRequired,
  userName: PropTypes.string,
  onLogout: PropTypes.func.isRequired,
  onStartNewTournament: PropTypes.func,
};

export default NavBar;
