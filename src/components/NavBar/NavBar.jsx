/**
 * @module NavBar
 * @description Responsive navigation bar with theme toggle and links.
 */
// Third-party imports
import React, { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import "./navbar.css";
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - const scrollToTop = () => (line 60)
 *   - const updateThemeColor = (isLight) => (line 67)
 *   - if (themeColorMeta) (line 69)
 *   - if (isLoggedIn) (line 96)
 *   - setThemeClicks(newClicks); (line 113)
 *   - if (newClicks.length >= 5) (line 115)
 *   - setThemeClicks([]); (line 116)
 *   - if (onMatrixActivate) (line 117)
 *   - onMatrixActivate(); (line 118)
 *   - if (onThemeChange) (line 130)
 *   - onThemeChange(newTheme); (line 131)
 *   - updateThemeColor(newTheme); (line 135)
 *   - setIsMobileMenuOpen(!isMobileMenuOpen); (line 139)
 *   - setView(key.toLowerCase()); (line 144)
 *   - setIsMobileMenuOpen(false); (line 145)
 *   - useEffect(() => (line 150)
 *   - const checkScroll = () => (line 151)
 *   - setShowScrollTop(window.scrollY > 300); (line 152)
 *   - checkScroll(); (line 155)
 *   - const throttledCheckScroll = () => (line 158)
 *   - if (timeoutId === null) (line 159)
 *   - checkScroll(); (line 161)
 *   - return () => (line 169)
 *   - if (timeoutId) (line 171)
 *   - clearTimeout(timeoutId); (line 172)
 *   - handleNavItemClick(key); (line 184)
 *   - if (!isLoggedIn) (line 194)
 *   - if (isLoggedIn) (line 212)
 *   - onLogout(); (line 219)
 *   - setIsMobileMenuOpen(false); (line 220)
 *   - setView("tournament"); (line 237)
 *   - if (typeof onStartNewTournament === "function") (line 238)
 *   - onStartNewTournament(); (line 239)
 *   - if (isLoggedIn && userName) (line 259)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

// Utility functions
const scrollToTop = () => {
  // * Enhanced scroll behavior with fallback for older browsers
  if ("scrollBehavior" in document.documentElement.style) {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  } else {
    // * Fallback for browsers that don't support smooth scrolling
    const scrollStep = -window.scrollY / (500 / 15);
    const scrollInterval = setInterval(() => {
      if (window.scrollY !== 0) {
        window.scrollBy(0, scrollStep);
      } else {
        clearInterval(scrollInterval);
      }
    }, 15);
  }
};

// * Calculate responsive scroll threshold based on viewport height
const getScrollThreshold = () => {
  const viewportHeight = window.innerHeight;
  // * Show button after scrolling 1.5 viewport heights on mobile, 1 viewport height on desktop
  return viewportHeight <= 768 ? viewportHeight * 1.5 : viewportHeight;
};

function NavBar({
  view,
  setView,
  isLoggedIn,
  userName,
  onLogout,
  onStartNewTournament,
  isLightTheme,
  onThemeChange,
}) {
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isHighContrast, setIsHighContrast] = useState(false);

  // Define nav items based on login state
  const navItems = [];

  // Always show Tournament
  navItems.push({ key: "Tournament", label: "Tournament", href: "#" });

  // Show Profile if logged in
  if (isLoggedIn) {
    navItems.push({ key: "Profile", label: "Profile", href: "#" });
  }

  // Add external project links if on login page
  const externalLinks = isLoggedIn
    ? []
    : [
        { name: "K-Pop Site", url: "https://kpop.alw.lol" },
        { name: "Personal Site", url: "https://aaronwoods.info" },
      ];

  const handleMobileMenuClick = useCallback(() => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  }, [isMobileMenuOpen]);

  const handleHighContrastToggle = useCallback(() => {
    setIsHighContrast(!isHighContrast);
  }, [isHighContrast]);

  const handleNavItemClick = useCallback(
    (key) => {
      setView(key.toLowerCase());
      setIsMobileMenuOpen(false);
    },
    [setView]
  );

  useEffect(() => {
    // * Enhanced scroll detection with intersection observer for better performance
    let scrollTimeout = null;

    const checkScroll = () => {
      const scrollY = window.scrollY;
      const threshold = getScrollThreshold();
      const shouldShow = scrollY > threshold;

      // * Only update state if it actually changed
      setShowScrollTop(shouldShow);

      // * Enhanced scroll detection with responsive threshold
    };

    // * Initial check
    checkScroll();

    // * Improved throttling with requestAnimationFrame for better performance
    const throttledCheckScroll = () => {
      if (scrollTimeout) return;

      scrollTimeout = requestAnimationFrame(() => {
        checkScroll();
        scrollTimeout = null;
      });
    };

    window.addEventListener("scroll", throttledCheckScroll, { passive: true });

    // * Handle resize events to recalculate threshold
    const handleResize = () => {
      checkScroll();
    };

    window.addEventListener("resize", handleResize, { passive: true });

    return () => {
      window.removeEventListener("scroll", throttledCheckScroll);
      window.removeEventListener("resize", handleResize);
      if (scrollTimeout) {
        cancelAnimationFrame(scrollTimeout);
      }
    };
  }, []);

  // Create nav links
  const navLinks = navItems.map((item) => (
    <li key={item.key} className="navbar__item">
      <a
        href="#"
        onClick={(event) => {
          event.preventDefault();
          handleNavItemClick(item.key);
        }}
        className={view === item.key.toLowerCase() ? "active" : ""}
      >
        {item.label}
      </a>
    </li>
  ));

  // Add external project links if on login page
  if (!isLoggedIn) {
    externalLinks.forEach((link) => {
      navLinks.push(
        <li key={link.name} className="navbar__item navbar__item--external">
          <a
            href={link.url}
            target="_blank"
            rel="noopener noreferrer"
            className="navbar__external-link"
          >
            {link.name}
          </a>
        </li>
      );
    });
  }

  // Add logout button if user is logged in
  if (isLoggedIn) {
    navLinks.push(
      <li key="logout" className="navbar__item navbar__item--logout">
        <a
          href="#"
          onClick={(event) => {
            event.preventDefault();
            onLogout();
            setIsMobileMenuOpen(false);
          }}
        >
          Logout
        </a>
      </li>
    );
  }

  // Add site logo/name
  const logoItem = (
    <li key="logo" className="navbar__item navbar__item--logo">
      <a
        href="#"
        onClick={(e) => {
          e.preventDefault();
          // Treat logo as "home" ‚Üí Tournament Setup
          setView("tournament");
          if (typeof onStartNewTournament === "function") {
            onStartNewTournament();
          }
        }}
        className="navbar__logo-link"
        aria-label="Go to home page"
      >
        <img
          src="./images/cat.gif"
          alt="Cat animation"
          className="navbar__logo"
          width="30"
          height="30"
        />
        <span className="navbar__title">Meow Namester</span>
      </a>
    </li>
  );

  // Add user name if logged in
  let userInfo = null;
  if (isLoggedIn && userName) {
    userInfo = (
      <li key="user" className="navbar__item navbar__item--user">
        <span className="navbar__greeting" aria-label={`Welcome, ${userName}`}>
          Welcome, {userName}
        </span>
      </li>
    );
  }

  // If not logged in (on login screen), make navbar transparent
  const navbarClass = `navbar ${isLoggedIn ? "" : "transparent"} ${isMobileMenuOpen ? "mobile-menu-open" : ""} ${isLightTheme ? "light-theme" : "dark-theme"}`;

  // Help button to reset onboarding
  const helpButton = (
    <li key="help" className="navbar__item navbar__item--help">
      <button
        onClick={() => {
          localStorage.removeItem('catNameTournament_onboardingSeen');
          window.location.reload();
        }}
        className="navbar__help-button"
        title="Show onboarding tutorial again"
        aria-label="Show help tutorial"
      >
        ‚ùì
      </button>
    </li>
  );

  return (
    <>
      <nav className={navbarClass}>
        <div className="navbar__menu-container">
          {/* * Desktop navigation - hidden on mobile */}
          <ul
            className="navbar__menu-list navbar__menu-list--desktop"
            role="navigation"
            aria-label="Main navigation"
          >
            {logoItem}
            {userInfo}
            {navLinks}
            {helpButton}
            {/* Theme Toggle Button */}
            <li className="navbar__item navbar__item--theme-toggle">
              <button
                type="button"
                className="navbar__theme-toggle"
                onClick={onThemeChange}
                aria-label={isLightTheme ? "Switch to dark theme" : "Switch to light theme"}
                title={isLightTheme ? "Switch to dark theme" : "Switch to light theme"}
              >
                {isLightTheme ? "üåô" : "‚òÄÔ∏è"}
              </button>
            </li>
          </ul>

          {/* * Mobile menu button - always visible on mobile */}
          <button
            className="navbar__mobile-menu-button"
            onClick={handleMobileMenuClick}
            aria-label={isMobileMenuOpen ? "Close menu" : "Open menu"}
            aria-expanded={isMobileMenuOpen}
            aria-controls="mobile-menu"
            type="button"
          >
            <span
              className="navbar__mobile-menu-icon"
              aria-hidden="true"
            ></span>
          </button>
        </div>

        {/* * Mobile menu overlay - slides down from top */}
        <div
          id="mobile-menu"
          className={`navbar__mobile-menu ${isMobileMenuOpen ? "visible" : ""}`}
          aria-hidden={!isMobileMenuOpen}
        >
          <div className="navbar__mobile-menu-header">
            {logoItem}
            {userInfo && (
              <div className="navbar__mobile-user-info">{userInfo}</div>
            )}
          </div>

          <ul className="navbar__mobile-menu-list" role="navigation" aria-label="Mobile navigation">
            {/* * Render navigation items from navItems array */}
            {navItems.map((item) => {
              const isActive = view === item.key.toLowerCase();

              return (
                <li key={item.key} className="navbar__mobile-item">
                  <a
                    href="#"
                    onClick={(event) => {
                      event.preventDefault();
                      // * Close mobile menu when item is clicked
                      setIsMobileMenuOpen(false);
                      // * Handle navigation
                      handleNavItemClick(item.key);
                    }}
                    className={`navbar__mobile-link ${isActive ? "active" : ""}`}
                    aria-current={isActive ? "page" : undefined}
                    aria-label={`${item.label}${isActive ? " (current page)" : ""}`}
                  >
                    {item.label}
                  </a>
                </li>
              );
            })}

            {/* * Add help button for mobile */}
            <li key="help" className="navbar__mobile-item">
              <button
                onClick={() => {
                  localStorage.removeItem('catNameTournament_onboardingSeen');
                  window.location.reload();
                  setIsMobileMenuOpen(false);
                }}
                className="navbar__mobile-help-button"
                title="Show onboarding tutorial again"
              >
                ‚ùì Help
              </button>
            </li>

            {/* * Add logout button separately for mobile */}
            {isLoggedIn && (
              <li key="logout" className="navbar__mobile-item">
                <a
                  href="#"
                  onClick={(event) => {
                    event.preventDefault();
                    setIsMobileMenuOpen(false);
                    onLogout();
                  }}
                  className="navbar__mobile-link"
                >
                  Logout
                </a>
              </li>
            )}
            
            {/* Theme Toggle Button for Mobile */}
            <li className="navbar__mobile-item">
              <button
                type="button"
                className="navbar__mobile-theme-toggle"
                onClick={() => {
                  onThemeChange();
                  setIsMobileMenuOpen(false);
                }}
                aria-label={isLightTheme ? "Switch to dark theme" : "Switch to light theme"}
                title={isLightTheme ? "Switch to dark theme" : "Switch to light theme"}
              >
                {isLightTheme ? "üåô Switch to Dark Theme" : "‚òÄÔ∏è Switch to Light Theme"}
              </button>
            </li>
          </ul>
        </div>
      </nav>

      {/* * Mobile menu backdrop - prevents interaction with content behind */}
      {isMobileMenuOpen && (
        <div
          className="navbar__mobile-backdrop"
          onClick={() => setIsMobileMenuOpen(false)}
          aria-hidden="true"
        />
      )}

      {/* High Contrast Toggle */}
      <button
        type="button"
        className={`high-contrast-toggle ${isHighContrast ? "active" : ""}`}
        onClick={handleHighContrastToggle}
        aria-label={`${isHighContrast ? "Disable" : "Enable"} high contrast mode`}
        aria-pressed={isHighContrast}
      >
        <span className="high-contrast-icon" aria-hidden="true">
          {isHighContrast ? "üîç" : "üëÅÔ∏è"}
        </span>
        <span className="high-contrast-text">
          {isHighContrast ? "High Contrast" : "Normal"}
        </span>
      </button>

      {isLoggedIn && (
        <button
          type="button"
          className={`scroll-to-top ${showScrollTop ? "visible" : ""}`}
          onClick={scrollToTop}
          aria-label="Scroll to top"
          aria-hidden={!showScrollTop}
          tabIndex={showScrollTop ? 0 : -1}
        >
          ‚Üë
        </button>
      )}
    </>
  );
}

NavBar.displayName = "NavBar";

NavBar.propTypes = {
  view: PropTypes.string.isRequired,
  setView: PropTypes.func.isRequired,
  isLoggedIn: PropTypes.bool.isRequired,
  userName: PropTypes.string,
  onLogout: PropTypes.func.isRequired,
  onStartNewTournament: PropTypes.func,
  isLightTheme: PropTypes.bool.isRequired,
  onThemeChange: PropTypes.func.isRequired,
};

export default NavBar;
