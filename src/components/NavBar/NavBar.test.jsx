/* eslint-env vitest */
/**
 * @module NavBar.test
 * @description Tests for NavBar component theme switching functionality
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - describe("NavBar Component", () => (line 63)
 *   - beforeEach(() => (line 75)
 *   - test("renders theme toggle button", () => (line 81)
 *   - render(<NavBar (line 82)
 *   - expect(themeButton).toBeInTheDocument(); (line 86)
 *   - test("theme toggle calls onThemeChange with opposite theme", () => (line 89)
 *   - expect(onThemeChange).toHaveBeenCalledWith(false); (line 104)
 *   - test("theme toggle saves to localStorage", () => (line 107)
 *   - render(<NavBar (line 108)
 *   - expect(localStorageMock.setItem).toHaveBeenCalledWith("theme", "dark"); (line 115)
 *   - test("theme toggle updates meta theme-color", () => (line 118)
 *   - render(<NavBar (line 119)
 *   - expect(mockQuerySelector).toHaveBeenCalledWith("meta[name='theme-color']"); (line 128)
 *   - test("shows correct theme state based on current theme", () => (line 131)
 *   - expect(themeSwitch).toHaveAttribute("aria-checked", "true"); (line 139)
 *   - rerender(<NavBar (line 142)
 *   - expect(themeSwitch).toHaveAttribute("aria-checked", "false"); (line 143)
 *   - test("matrix mode activates after 5 rapid clicks", () => (line 146)
 *   - render(<NavBar (line 148)
 *   - for (let i = 0; i < 5; i++) (line 155)
 *   - expect(onMatrixActivate).toHaveBeenCalled(); (line 159)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { describe, test, expect, beforeEach, vi } from 'vitest';
import NavBar from './NavBar';

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn()
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
  writable: true
});

// Mock document.querySelector for meta theme-color
const mockMetaElement = {
  setAttribute: vi.fn()
};
const mockQuerySelector = vi.fn(() => mockMetaElement);
Object.defineProperty(document, 'querySelector', {
  value: mockQuerySelector,
  writable: true
});

describe('NavBar Component', () => {
  const defaultProps = {
    view: 'tournament',
    setView: vi.fn(),
    isLoggedIn: false,
    userName: '',
    onLogout: vi.fn(),
    onMatrixActivate: vi.fn(),
    isLightTheme: true,
    onThemeChange: vi.fn()
  };

  beforeEach(() => {
    vi.clearAllMocks();
    localStorageMock.setItem.mockClear();
    mockMetaElement.setAttribute.mockClear();
  });

  test('renders theme toggle button', () => {
    render(<NavBar {...defaultProps} />);
    const themeButton = screen.getByRole('button', {
      name: /Switch to dark theme/i
    });
    expect(themeButton).toBeInTheDocument();
  });

  test('theme toggle calls onThemeChange', () => {
    const onThemeChange = vi.fn();
    render(
      <NavBar
        {...defaultProps}
        onThemeChange={onThemeChange}
        isLightTheme={true}
      />
    );

    const themeButton = screen.getByRole('button', {
      name: /Switch to dark theme/i
    });
    fireEvent.click(themeButton);

    expect(onThemeChange).toHaveBeenCalled();
  });

  test('theme toggle calls onThemeChange when clicked', () => {
    const onThemeChange = vi.fn();
    render(<NavBar {...defaultProps} isLightTheme={true} onThemeChange={onThemeChange} />);

    const themeButton = screen.getByRole('button', {
      name: /Switch to dark theme/i
    });
    fireEvent.click(themeButton);

    expect(onThemeChange).toHaveBeenCalled();
  });

  test('theme toggle button has correct accessibility attributes', () => {
    render(<NavBar {...defaultProps} isLightTheme={true} />);

    const themeButton = screen.getByRole('button', {
      name: /Switch to dark theme/i
    });

    expect(themeButton).toHaveAttribute('aria-label', 'Switch to dark theme');
    expect(themeButton).toHaveAttribute('title', 'Switch to dark theme');
  });

  test('shows correct theme state based on current theme', () => {
    // Test light theme
    const { rerender } = render(
      <NavBar {...defaultProps} isLightTheme={true} />
    );
    const themeButton = screen.getByRole('button', {
      name: /Switch to dark theme/i
    });
    expect(themeButton).toHaveTextContent('🌙');

    // Test dark theme
    rerender(<NavBar {...defaultProps} isLightTheme={false} />);
    const themeButtonDark = screen.getByRole('button', {
      name: /Switch to light theme/i
    });
    expect(themeButtonDark).toHaveTextContent('☀️');
  });

  test('theme toggle button shows correct icon for each theme', () => {
    const { rerender } = render(<NavBar {...defaultProps} isLightTheme={true} />);

    // Light theme should show moon icon
    expect(screen.getByText('🌙')).toBeInTheDocument();

    // Dark theme should show sun icon
    rerender(<NavBar {...defaultProps} isLightTheme={false} />);
    expect(screen.getByText('☀️')).toBeInTheDocument();
  });
});
