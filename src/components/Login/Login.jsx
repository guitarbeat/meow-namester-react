/**
 * @module Login
 * @description User login component with fun cat-themed interactions.
 */
import React, { useState, useEffect, useRef } from "react";
import PropTypes from "prop-types";
import devLog from "../../utils/logger";
import styles from "./Login.module.css";
import BongoCat from "../BongoCat/BongoCat";
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - function Login( (line 43)
 *   - useEffect(() => (line 54)
 *   - return () => (line 58)
 *   - const generateFunName = () => (line 95)
 *   - const resetTypingTimer = () => (line 105)
 *   - if (typingTimeoutRef.current) (line 106)
 *   - clearTimeout(typingTimeoutRef.current); (line 107)
 *   - setIsTyping(false); (line 110)
 *   - useEffect(() => (line 114)
 *   - fetch("https://catfact.ninja/fact") (line 116)
 *   - return () => (line 121)
 *   - if (typingTimeoutRef.current) (line 122)
 *   - clearTimeout(typingTimeoutRef.current); (line 123)
 *   - const handleNameChange = (e) => (line 128)
 *   - setName(e.target.value); (line 129)
 *   - setIsTyping(true); (line 132)
 *   - resetTypingTimer(); (line 133)
 *   - if (error) (line 135)
 *   - setError(""); (line 136)
 *   - const handleSubmit = async (e) => (line 140)
 *   - if (!finalName) (line 146)
 *   - setName(finalName); (line 148)
 *   - setIsLoading(true); (line 151)
 *   - setError(err.message || "Something went wrong. Please try again."); (line 155)
 *   - setIsLoading(false); (line 156)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

function Login({ onLogin }) {
  const [name, setName] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [catFact, setCatFact] = useState("");
  const [isTyping, setIsTyping] = useState(false);

  const containerRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  // Add login-page class to body when component mounts
  useEffect(() => {
    document.body.classList.add("login-page");

    // Remove class when component unmounts
    return () => {
      document.body.classList.remove("login-page");
    };
  }, []);

  const funnyPrefixes = [
    "Captain",
    "Dr.",
    "Professor",
    "Lord",
    "Lady",
    "Sir",
    "Duchess",
    "Count",
    "Princess",
    "Chief",
    "Master",
    "Agent",
    "Detective",
    "Admiral",
  ];

  const funnyAdjectives = [
    "Whiskers",
    "Purrington",
    "Meowington",
    "Pawsome",
    "Fluffles",
    "Scratchy",
    "Naptastic",
    "Furball",
    "Cattastic",
    "Pawdorable",
    "Whiskertron",
    "Purrfect",
  ];

  const generateFunName = () => {
    const prefix =
      funnyPrefixes[Math.floor(Math.random() * funnyPrefixes.length)];
    const adjective =
      funnyAdjectives[Math.floor(Math.random() * funnyAdjectives.length)];
    const randomNumber = Math.floor(Math.random() * 99) + 1;

    return `${prefix} ${adjective}${randomNumber}`;
  };

  const resetTypingTimer = () => {
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    typingTimeoutRef.current = setTimeout(() => {
      setIsTyping(false);
    }, 1000);
  };

  useEffect(() => {
    // Fetch a random cat fact for fun
    fetch("https://catfact.ninja/fact")
      .then((res) => res.json())
      .then((data) => setCatFact(data.fact))
      .catch(() => setCatFact("Cats make purr-fect companions!"));

    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, []);

  const handleNameChange = (e) => {
    setName(e.target.value);

    // Set typing state for BongoCat
    setIsTyping(true);
    resetTypingTimer();

    if (error) {
      setError("");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    let finalName = name.trim();

    // If name is empty, generate a random one
    if (!finalName) {
      finalName = generateFunName();
      setName(finalName);
    }

    setIsLoading(true);
    try {
      await onLogin(finalName);
    } catch (err) {
      setError(err.message || "Something went wrong. Please try again.");
      setIsLoading(false);
    }
  };

  // Example random name for preview
  const exampleRandomName = useRef(generateFunName());

  return (
    <div className={styles.loginWrapper}>
      {/* BongoCat component */}
      <BongoCat
        containerRef={containerRef}
        color="#000"
        onBongo={() => devLog("Cat bongoed!")}
      />

      <div className={styles.backgroundContainer}>
        <div className={styles.overlay} />
        <img
          src="/images/IMG_5044.JPEG"
          alt=""
          className={styles.backgroundImage}
          loading="eager"
        />
      </div>

      <div className={styles.loginContainer} ref={containerRef}>
        <section className={styles.imageSection}>
          <h1 className={styles.welcomeTitle}>Help Aaron!</h1>
          <img
            src="/images/IMG_5071.JPG"
            alt="Cute cat avatar"
            className={styles.catImage}
            loading="eager"
          />
          <p className={styles.welcomeText}>
            Join Aaron&apos;s quest to find the perfect cat name through science
            and democracy!
          </p>
        </section>

        <div className={styles.loginContent}>
          <div>
            <h2 className={styles.loginTitle}>Cat Name Olympics</h2>
            <p className={styles.catFact}>
              {catFact ? (
                <>
                  <span className={styles.catFactIcon}>üê±</span>
                  {catFact}
                </>
              ) : (
                <span className={styles.loadingFact}>
                  <span className={styles.loadingDots}>
                    Loading a fun cat fact
                  </span>
                  <span className={styles.loadingDots}>...</span>
                </span>
              )}
            </p>
            {isTyping ? (
              <div className={styles.typingIndicator}>
                <span className={styles.typingText}>
                  The cat is watching you type!
                </span>
                <span className={styles.typingDots}>
                  <span className={styles.dot}>.</span>
                  <span className={styles.dot}>.</span>
                  <span className={styles.dot}>.</span>
                </span>
              </div>
            ) : null}
          </div>

          <form onSubmit={handleSubmit} className={styles.loginForm}>
            <div className={styles.inputWrapper}>
              <label htmlFor="loginName" className={styles.inputLabel}>
                Your Judge Name:
              </label>
              <div className={styles.inputContainer}>
                <input
                  id="loginName"
                  type="text"
                  value={name}
                  onChange={handleNameChange}
                  placeholder="Enter your name (or leave empty for a random identity)"
                  className={`${styles.loginInput} ${error ? styles.error : ""}`}
                  autoFocus
                  disabled={isLoading}
                  aria-label="Your name"
                  maxLength={30}
                />
                {!name.trim() && (
                  <div
                    className={styles.randomNameIndicator}
                    title="A random name will be generated"
                  >
                    <span className={styles.diceIcon}>üé≤</span>
                  </div>
                )}
              </div>
              {error && (
                <p className={styles.errorMessage} role="alert">
                  {error}
                </p>
              )}
              <p className={styles.explainerText}>
                Type your name to save your ratings, or leave it blank for a
                surprise name!
              </p>
              {name.trim() && (
                <div className={styles.characterCounter}>
                  <span className={styles.counterText}>
                    {name.length}/30 characters
                  </span>
                  <div className={styles.counterBar}>
                    <div
                      className={styles.counterProgress}
                      style={{ width: `${(name.length / 30) * 100}%` }}
                    />
                  </div>
                </div>
              )}
            </div>

            <button
              type="submit"
              className={`${styles.singleButton} ${isLoading ? styles.loading : ""} ${name.trim() ? styles.hasName : ""}`}
              disabled={isLoading}
            >
              <span className={styles.buttonContent}>
                {isLoading ? (
                  <>
                    <span className={styles.spinner} />
                    Loading...
                  </>
                ) : (
                  <>
                    {name.trim() ? "Start Judging!" : "Get Random Name & Start"}
                    <span className={styles.buttonEmoji} aria-hidden="true">
                      üèÜ
                    </span>
                  </>
                )}
              </span>
            </button>
          </form>

          <div className={styles.namePreview}>
            {name ? (
              <p className={styles.helperText}>
                You&apos;ll be known as{" "}
                <span className={styles.nameHighlight}>&quot;{name}&quot;</span>
              </p>
            ) : (
              <div className={styles.randomPreview}>
                <p className={`${styles.helperText} ${styles.randomNameText}`}>
                  We&apos;ll generate a fun name automatically!
                </p>
                <p className={styles.randomNameExample}>
                  <span className={styles.exampleLabel}>Example: </span>
                  <span className={styles.exampleValue}>
                    {exampleRandomName.current}
                  </span>
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

Login.displayName = "Login";

Login.propTypes = {
  onLogin: PropTypes.func.isRequired,
};

export default Login;
