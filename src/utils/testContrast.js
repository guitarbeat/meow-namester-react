/**
 * @module testContrast
 * @description Test script to verify contrast ratios of current color scheme
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - function testColorScheme(scheme, themeName) (line 56)
 *   - if (meetsAA) (line 87)
 *   - export function runContrastTests() (line 106)
 *   - if (totalPassed === totalTests) (line 121)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

import {
  getContrastRatio,
  meetsWCAGAA,
  getAccessibilityLevel
} from './contrastChecker';

// Current color scheme from global.css
const colorScheme = {
  light: {
    textPrimary: '#111827',
    textSecondary: '#1f2937',
    textTertiary: '#374151',
    background: '#eef1f6',
    cardBackground: '#ffffff',
    cardBorder: '#d1d5db',
    cardHover: '#f9fafb',
    borderColor: '#d1d5db',
    surfaceColor: '#f4f6fa',
    primary: '#5a5cff',
    primaryLight: '#e6e7ff',
    primaryDark: '#3235db'
  },
  dark: {
    textPrimary: '#ffffff',
    textSecondary: '#f1f5f9',
    textTertiary: '#cbd5e1',
    background: '#0f1420',
    cardBackground: '#1a1f3d',
    cardBorder: '#2a2f4a',
    cardHover: '#242a45',
    borderColor: '#2a2f4a',
    surfaceColor: '#1a1f35',
    primary: '#7d7fff',
    primaryLight: 'rgb(125 127 255 / 20%)',
    primaryDark: '#cdceff'
  }
};

/**
 * Test contrast ratios for a color scheme
 * @param {Object} scheme - Color scheme object
 * @param {string} themeName - Name of the theme for logging
 */
function testColorScheme(scheme, themeName) {
  console.log(`\n=== Testing ${themeName} Theme ===`);

  const tests = [
    // Text on background combinations
    {
      foreground: scheme.textPrimary,
      background: scheme.background,
      description: 'Primary text on background'
    },
    {
      foreground: scheme.textSecondary,
      background: scheme.background,
      description: 'Secondary text on background'
    },
    {
      foreground: scheme.textPrimary,
      background: scheme.cardBackground,
      description: 'Primary text on card'
    },
    {
      foreground: scheme.textSecondary,
      background: scheme.cardBackground,
      description: 'Secondary text on card'
    },
    {
      foreground: scheme.textPrimary,
      background: scheme.surfaceColor,
      description: 'Primary text on surface'
    },
    {
      foreground: scheme.textSecondary,
      background: scheme.surfaceColor,
      description: 'Secondary text on surface'
    },

    // Primary colors on backgrounds
    {
      foreground: scheme.primary,
      background: scheme.background,
      description: 'Primary color on background'
    },
    {
      foreground: scheme.primary,
      background: scheme.cardBackground,
      description: 'Primary color on card'
    },
    {
      foreground: scheme.primary,
      background: scheme.surfaceColor,
      description: 'Primary color on surface'
    },

    // Borders and interactive elements
    {
      foreground: scheme.borderColor,
      background: scheme.background,
      description: 'Border on background'
    },
    {
      foreground: scheme.cardBorder,
      background: scheme.cardBackground,
      description: 'Card border on card'
    }
  ];

  let passCount = 0;
  let failCount = 0;

  tests.forEach((test) => {
    try {
      const ratio = getContrastRatio(test.foreground, test.background);
      const meetsAA = meetsWCAGAA(ratio);
      const level = getAccessibilityLevel(ratio);

      if (meetsAA) {
        passCount++;
        console.log(`‚úÖ ${test.description}: ${ratio.toFixed(2)}:1 (${level})`);
      } else {
        failCount++;
        console.log(
          `‚ùå ${test.description}: ${ratio.toFixed(2)}:1 (${level}) - FAILS WCAG AA`
        );
      }
    } catch (error) {
      console.log(
        `‚ö†Ô∏è  ${test.description}: Error calculating contrast - ${error.message}`
      );
    }
  });

  console.log(
    `\n${themeName} Theme Results: ${passCount} passed, ${failCount} failed`
  );
  return { passCount, failCount };
}

/**
 * Run all contrast tests
 */
export function runContrastTests() {
  console.log('üé® Running Contrast Ratio Tests for Meow Namester Color Scheme');

  const lightResults = testColorScheme(colorScheme.light, 'Light');
  const darkResults = testColorScheme(colorScheme.dark, 'Dark');

  const totalPassed = lightResults.passCount + darkResults.passCount;
  const totalTests =
    lightResults.passCount +
    lightResults.failCount +
    (darkResults.passCount + darkResults.failCount);

  console.log('\n=== Overall Results ===');
  console.log(`Total Tests: ${totalTests}`);
  console.log(`Passed: ${totalPassed}`);
  console.log(`Failed: ${totalTests - totalPassed}`);
  console.log(
    `Success Rate: ${((totalPassed / totalTests) * 100).toFixed(1)}%`
  );

  if (totalPassed === totalTests) {
    console.log('üéâ All contrast ratios meet WCAG AA standards!');
  } else {
    console.log(
      '‚ö†Ô∏è  Some contrast ratios need improvement to meet WCAG AA standards.'
    );
  }
}

// Export for use in development
export default runContrastTests;
