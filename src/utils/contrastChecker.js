/**
 * @module contrastChecker
 * @description Utility functions for checking color contrast ratios for accessibility
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - function getRelativeLuminance(r, g, b) (line 30)
 *   - export function getContrastRatio(color1, color2) (line 44)
 *   - const getRGB = (color) => (line 46)
 *   - if (color.startsWith('#')) (line 47)
 *   - if (color.startsWith('rgb')) (line 55)
 *   - return (lighter + 0.05) / (darker + 0.05); (line 81)
 *   - export function meetsWCAGAA(contrastRatio, size = 'normal') (line 90)
 *   - export function meetsWCAGAAA(contrastRatio, size = 'normal') (line 101)
 *   - export function getAccessibilityLevel(contrastRatio, size = 'normal') (line 112)
 *   - if (meetsWCAGAAA(contrastRatio, size)) (line 113)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

/**
 * Calculate the relative luminance of a color
 * @param {number} r - Red component (0-255)
 * @param {number} g - Green component (0-255)
 * @param {number} b - Blue component (0-255)
 * @returns {number} Relative luminance value
 */
function getRelativeLuminance(r, g, b) {
  const [rs, gs, bs] = [r, g, b].map((c) => {
    c = c / 255;
    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  });
  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
}

/**
 * Calculate contrast ratio between two colors
 * @param {string} color1 - First color (hex, rgb, or named color)
 * @param {string} color2 - Second color (hex, rgb, or named color)
 * @returns {number} Contrast ratio
 */
export function getContrastRatio(color1, color2) {
  // Convert colors to RGB values
  const getRGB = (color) => {
    if (color.startsWith("#")) {
      const hex = color.slice(1);
      const r = parseInt(hex.slice(0, 2), 16);
      const g = parseInt(hex.slice(2, 4), 16);
      const b = parseInt(hex.slice(4, 6), 16);
      return [r, g, b];
    }

    if (color.startsWith("rgb")) {
      const match = color.match(/\d+/g);
      return match ? match.map(Number) : [0, 0, 0];
    }

    // Named colors - add common ones
    const namedColors = {
      white: [255, 255, 255],
      black: [0, 0, 0],
      red: [255, 0, 0],
      green: [0, 128, 0],
      blue: [0, 0, 255],
    };

    return namedColors[color.toLowerCase()] || [0, 0, 0];
  };

  const [r1, g1, b1] = getRGB(color1);
  const [r2, g2, b2] = getRGB(color2);

  const lum1 = getRelativeLuminance(r1, g1, b1);
  const lum2 = getRelativeLuminance(r2, g2, b2);

  const lighter = Math.max(lum1, lum2);
  const darker = Math.min(lum1, lum2);

  return (lighter + 0.05) / (darker + 0.05);
}

/**
 * Check if contrast ratio meets WCAG AA standards
 * @param {number} contrastRatio - The contrast ratio to check
 * @param {string} size - Text size ('normal' or 'large')
 * @returns {boolean} True if meets WCAG AA standards
 */
export function meetsWCAGAA(contrastRatio, size = "normal") {
  const threshold = size === "large" ? 3 : 4.5;
  return contrastRatio >= threshold;
}

/**
 * Check if contrast ratio meets WCAG AAA standards
 * @param {number} contrastRatio - The contrast ratio to check
 * @param {string} size - Text size ('normal' or 'large')
 * @returns {boolean} True if meets WCAG AAA standards
 */
export function meetsWCAGAAA(contrastRatio, size = "normal") {
  const threshold = size === "large" ? 4.5 : 7;
  return contrastRatio >= threshold;
}

/**
 * Get accessibility level for a contrast ratio
 * @param {number} contrastRatio - The contrast ratio to evaluate
 * @param {string} size - Text size ('normal' or 'large')
 * @returns {string} Accessibility level description
 */
export function getAccessibilityLevel(contrastRatio, size = "normal") {
  if (meetsWCAGAAA(contrastRatio, size)) {
    return "AAA";
  } else if (meetsWCAGAA(contrastRatio, size)) {
    return "AA";
  } else {
    return "Fail";
  }
}
